#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cerrno>
#include <cmath>
#include <cstring>
#include <cctype>
#include <cstdint>
#ifdef _MSC_VER
#include <BaseTsd.h>
typedef SSIZE_T ssize_t;
#endif

#define SDL_MAIN_HANDLED
#include <SDL.h>

#include "aids.hpp"
using namespace aids;

#include "config_common.cpp"

const char * const CONFIG_FILE_PATH = "./assets/vars.conf";

int main(int argc, char *argv[])
{
    (void) argc;
    (void) argv;
    reload_config_file(CONFIG_FILE_PATH);

    println(stdout, "// Generated by `", __FILE__, "` from `", CONFIG_FILE_PATH, "`");
    for (size_t index = 0; index < CONFIG_VAR_CAPACITY; ++index) {
        auto name = config_names[index];
        switch (config_types[index]) {
        case CONFIG_TYPE_INT: {
            print(stdout, "#define ", name, " ");
            println(stdout, config_values[index].int_value);
        } break;

        case CONFIG_TYPE_FLOAT: {
            print(stdout, "#define ", name, " ");
            println(stdout, config_values[index].float_value, "f");
        } break;

        case CONFIG_TYPE_COLOR: {
            println(stdout, "const RGBA ", name, " = {",
                    (float) config_values[index].color_value.r, "f,",
                    (float) config_values[index].color_value.g, "f,",
                    (float) config_values[index].color_value.b, "f,",
                    (float) config_values[index].color_value.a, "f};");
        } break;

        case CONFIG_TYPE_STRING: {
            println(stdout, "#define ", name, " \"", config_values[index].string_value, "\"_sv");
        } break;

        case CONFIG_TYPE_UNKNOWN: {
            println(stderr, "[ERROR] Variable ", config_names[index], " has an unknown type.");
            abort();
        } break;
        }
    }

    return 0;
}
